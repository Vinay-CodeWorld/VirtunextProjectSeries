{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Cambria Math;}{\f2\fnil\fcharset0 Cambria Math;}{\f3\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs96\lang9     Documetation\line\fs48 Desktop Style Calculator Documentation\par
\b 1. Overview\par
\b0 This is a Java Swing-based calculator that provides a graphical user interface (GUI) for performing basic arithmetic operations. It supports:\par
\par
Standard operations: Addition (+), Subtraction (-), Multiplication (*), Division (/)\par
\par
Parentheses: ( and ) for grouping operations\par
\par
Decimal numbers: Supports floating-point calculations\par
\par
Editing: Backspace (\f1\u8592?\f0 ) and Clear (C) functionality\par
\par
\b 2. Features\b0\par
2.1. User Interface\par
Display: A text field at the top shows the input and results.\par
\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Buttons:\par
{\pntext\f3\'B7\tab}Digits: 0-9\par
{\pntext\f3\'B7\tab}Operators: +, -, *, /\par
{\pntext\f3\'B7\tab}Special Functions:\par
{\pntext\f3\'B7\tab}( and ) for grouping\par
{\pntext\f3\'B7\tab}. for decimal input\par
{\pntext\f3\'B7\tab}= to evaluate the expression\par
{\pntext\f3\'B7\tab}C to clear the display\par
{\pntext\f3\'B7\tab}\f1\u8592?\f0  to delete the last character\par

\pard\sa200\sl276\slmult1\par

\pard\sa200\sl276\slmult1\b 2.2. Mathematical Operations\b0\par
Follows standard operator precedence (PEMDAS/BODMAS rules):\par
\par
Parentheses first\par
\par
Multiplication & Division (left to right)\par
\par
Addition & Subtraction (left to right)\par
\par
Handles floating-point numbers (e.g., 3.5 + 2.1 = 5.6)\par
\par
\ul Error Handling:\par
\ulnone\par
Displays "Error" for invalid expressions\par
\par
Prevents division by zero\par
\par
\b 3. How It Works\par
\b0 3.1. Expression Evaluation\par
The calculator uses a stack-based algorithm to parse and evaluate mathematical expressions:\par
\par
Tokenization: Processes numbers and operators.\par
\par
Operator Precedence: Ensures * and / are evaluated before + and -.\par
\par
Parentheses Handling: Evaluates nested expressions first.\par
\par
\b 3.2. Key Methods\par
\b0 Method\tab Description\par
evaluate(String expr)\tab Parses and computes the result of an arithmetic expression\par
isOperator(char c)\tab Checks if a character is +, -, *, or /\par
hasPrecedence(op1, op2)\tab Determines if op1 has higher precedence than op2\par
applyOperation(op, a, b)\tab Performs the arithmetic operation (+, -, *, /)\par
\par
\b 4. Usage\par
4.1. Running the Calculator\par
\b0 Compile & Run:\par
\par
sh\par
javac DesktopStyleCalculator.java\par
java DesktopStyleCalculator\par
Interact with the GUI:\par
\par
Enter numbers and operators using buttons.\par
\par
Press = to compute the result.\par
\par
Use C to clear or \f1\u8592?\f0  to correct mistakes.\par
\par
\b 4.2. Example Calculations\par
\b0 Input\tab Output\par
3 + 5 * 2\tab 13\par
(3 + 5) * 2\tab 16\par
10 / 3\tab 3.333...\par
5 / 0\tab Error\par
\b 5. Limitations\b0\par
Does not support advanced functions (e.g., sin, log, ^).\par
\par
No memory (M+, M-, MR) features.\par
\par
Limited error messages (generic "Error" display).\par
\par
\b 6. Future Improvements\b0\par
Add scientific functions (e.g., square root, exponents).\par
\par
Implement memory storage (store/recall values).\par
\par
Improve error messages (e.g., "Syntax Error", "Division by Zero").\par
\par
\b 7. Conclusion\b0\par
This calculator provides a simple, functional GUI for basic arithmetic. It is built with Java Swing and avoids external dependencies by using a custom expression evaluator.\line\line\line\b code :\line import\f2  \f0 javax\f2 .\f0 swing\f2 .\f0 *\f2 ;\f0\par
import\f2  \f0 java\f2 .\f0 awt\f2 .\f0 *\f2 ;\f0\par
import\f2  \f0 java\f2 .\f0 awt\f2 .\f0 event\f2 .\f0 *\f2 ;\f0\par
import\f2  \f0 java\f2 .\f0 util\f2 .\f0 Stack\f2 ;\f0\par
\par
public\f2  \f0 class\f2  \f0 DesktopStyleCalculator\f2  \{\f0\par
\f2     \f0 private\f2  \f0 JTextField\f2  \f0 display\f2 ;\f0\par
\par
\f2     \f0 public\f2  \f0 static\f2  \f0 void\f2  \f0 main\f2 (\f0 String\f2 [] \f0 args\f2 ) \{\f0\par
\f2         \f0 SwingUtilities\f2 .\f0 invokeLater\f2 (() -> \f0 new\f2  \f0 DesktopStyleCalculator\f2 ().\f0 createUI\f2 ());\f0\par
\f2     \}\f0\par
\par
\f2     \f0 public\f2  \f0 void\f2  \f0 createUI\f2 () \{\f0\par
\f2         \f0 JFrame\f2  \f0 frame\f2  = \f0 new\f2  \f0 JFrame\f2 (\f0 "Calculator"\f2 );\f0\par
\f2         \f0 frame\f2 .\f0 setDefaultCloseOperation\f2 (\f0 JFrame\f2 .\f0 EXIT\f2 _\f0 ON\f2 _\f0 CLOSE\f2 );\f0\par
\f2         \f0 frame\f2 .\f0 setSize\f2 (\f0 350\f2 , \f0 450\f2 );\f0\par
\f2         \f0 frame\f2 .\f0 setResizable\f2 (\f0 false\f2 );\f0\par
\par
\f2         \f0 display\f2  = \f0 new\f2  \f0 JTextField\f2 ();\f0\par
\f2         \f0 display\f2 .\f0 setFont\f2 (\f0 new\f2  \f0 Font\f2 (\f0 "Segoe\f2  \f0 UI"\f2 , \f0 Font\f2 .\f0 BOLD\f2 , \f0 28\f2 ));\f0\par
\f2         \f0 display\f2 .\f0 setHorizontalAlignment\f2 (\f0 JTextField\f2 .\f0 RIGHT\f2 );\f0\par
\f2         \f0 display\f2 .\f0 setEditable\f2 (\f0 false\f2 );\f0\par
\f2         \f0 display\f2 .\f0 setPreferredSize\f2 (\f0 new\f2  \f0 Dimension\f2 (\f0 350\f2 , \f0 60\f2 ));\f0\par
\par
\f2         \f0 JPanel\f2  \f0 buttonPanel\f2  = \f0 new\f2  \f0 JPanel\f2 (\f0 new\f2  \f0 GridLayout\f2 (\f0 5\f2 , \f0 4\f2 , \f0 5\f2 , \f0 5\f2 ));\f0\par
\f2         \f0 String\f2 [] \f0 buttons\f2  = \{\f0\par
\f2             \f0 "7"\f2 , \f0 "8"\f2 , \f0 "9"\f2 , \f0 "\f2 /\f0 "\f2 ,\f0\par
\f2             \f0 "4"\f2 , \f0 "5"\f2 , \f0 "6"\f2 , \f0 "*"\f2 ,\f0\par
\f2             \f0 "1"\f2 , \f0 "2"\f2 , \f0 "3"\f2 , \f0 "\f2 -\f0 "\f2 ,\f0\par
\f2             \f0 "0"\f2 , \f0 "\f2 .\f0 "\f2 , \f0 "\f2 =\f0 "\f2 , \f0 "\f2 +\f0 "\f2 ,\f0\par
\f2             \f0 "C"\f2 , \f0 "\f2 (\f0 "\f2 , \f0 "\f2 )\f0 "\f2 , \f0 "\f1\u8592?\f0 "\par
\f2         \};\f0\par
\par
\f2         \f0 for\f2  (\f0 String\f2  \f0 text\f2  : \f0 buttons\f2 ) \{\f0\par
\f2             \f0 JButton\f2  \f0 btn\f2  = \f0 createButton\f2 (\f0 text\f2 );\f0\par
\f2             \f0 buttonPanel\f2 .\f0 add\f2 (\f0 btn\f2 );\f0\par
\f2         \}\f0\par
\par
\f2         \f0 JPanel\f2  \f0 mainPanel\f2  = \f0 new\f2  \f0 JPanel\f2 ();\f0\par
\f2         \f0 mainPanel\f2 .\f0 setLayout\f2 (\f0 new\f2  \f0 BoxLayout\f2 (\f0 mainPanel\f2 , \f0 BoxLayout\f2 .\f0 Y\f2 _\f0 AXIS\f2 ));\f0\par
\f2         \f0 mainPanel\f2 .\f0 setBorder\f2 (\f0 BorderFactory\f2 .\f0 createEmptyBorder\f2 (\f0 10\f2 , \f0 10\f2 , \f0 10\f2 , \f0 10\f2 ));\f0\par
\f2         \f0 mainPanel\f2 .\f0 add\f2 (\f0 display\f2 );\f0\par
\f2         \f0 mainPanel\f2 .\f0 add\f2 (\f0 Box\f2 .\f0 createRigidArea\f2 (\f0 new\f2  \f0 Dimension\f2 (\f0 0\f2 , \f0 10\f2 )));\f0\par
\f2         \f0 mainPanel\f2 .\f0 add\f2 (\f0 buttonPanel\f2 );\f0\par
\par
\f2         \f0 frame\f2 .\f0 setContentPane\f2 (\f0 mainPanel\f2 );\f0\par
\f2         \f0 frame\f2 .\f0 setVisible\f2 (\f0 true\f2 );\f0\par
\f2     \}\f0\par
\par
\f2     \f0 private\f2  \f0 JButton\f2  \f0 createButton\f2 (\f0 String\f2  \f0 text\f2 ) \{\f0\par
\f2         \f0 JButton\f2  \f0 button\f2  = \f0 new\f2  \f0 JButton\f2 (\f0 text\f2 );\f0\par
\f2         \f0 button\f2 .\f0 setFont\f2 (\f0 new\f2  \f0 Font\f2 (\f0 "Segoe\f2  \f0 UI"\f2 , \f0 Font\f2 .\f0 BOLD\f2 , \f0 20\f2 ));\f0\par
\f2         \f0 button\f2 .\f0 setFocusPainted\f2 (\f0 false\f2 );\f0\par
\f2         \f0 button\f2 .\f0 setBackground\f2 (\f0 Color\f2 .\f0 WHITE\f2 );\f0\par
\f2         \f0 button\f2 .\f0 setForeground\f2 (\f0 Color\f2 .\f0 BLACK\f2 );\f0\par
\f2         \f0 button\f2 .\f0 setPreferredSize\f2 (\f0 new\f2  \f0 Dimension\f2 (\f0 80\f2 , \f0 60\f2 ));\f0\par
\par
\f2         \f0 button\f2 .\f0 addActionListener\f2 (\f0 e\f2  -> \f0 handleClick\f2 (\f0 text\f2 ));\f0\par
\f2         \f0 return\f2  \f0 button\f2 ;\f0\par
\f2     \}\f0\par
\par
\f2     \f0 private\f2  \f0 void\f2  \f0 handleClick\f2 (\f0 String\f2  \f0 text\f2 ) \{\f0\par
\f2         \f0 if\f2  (\f0 text\f2 .\f0 equals\f2 (\f0 "C"\f2 )) \{\f0\par
\f2             \f0 display\f2 .\f0 setText\f2 (\f0 ""\f2 );\f0\par
\f2         \} \f0 else\f2  \f0 if\f2  (\f0 text\f2 .\f0 equals\f2 (\f0 "\f1\u8592?\f0 "\f2 )) \{\f0\par
\f2             \f0 String\f2  \f0 current\f2  = \f0 display\f2 .\f0 getText\f2 ();\f0\par
\f2             \f0 if\f2  (!\f0 current\f2 .\f0 isEmpty\f2 ()) \{\f0\par
\f2                 \f0 display\f2 .\f0 setText\f2 (\f0 current\f2 .\f0 substring\f2 (\f0 0\f2 , \f0 current\f2 .\f0 length\f2 () - \f0 1\f2 ));\f0\par
\f2             \}\f0\par
\f2         \} \f0 else\f2  \f0 if\f2  (\f0 text\f2 .\f0 equals\f2 (\f0 "\f2 =\f0 "\f2 )) \{\f0\par
\f2             \f0 evaluateExpression\f2 ();\f0\par
\f2         \} \f0 else\f2  \{\f0\par
\f2             \f0 display\f2 .\f0 setText\f2 (\f0 display\f2 .\f0 getText\f2 () + \f0 text\f2 );\f0\par
\f2         \}\f0\par
\f2     \}\f0\par
\par
\f2     \f0 private\f2  \f0 void\f2  \f0 evaluateExpression\f2 () \{\f0\par
\f2         \f0 String\f2  \f0 expr\f2  = \f0 display\f2 .\f0 getText\f2 ();\f0\par
\f2         \f0 try\f2  \{\f0\par
\f2             \f0 if\f2  (\f0 expr\f2 .\f0 isEmpty\f2 ()) \{\f0\par
\f2                 \f0 display\f2 .\f0 setText\f2 (\f0 "Empty"\f2 );\f0\par
\f2                 \f0 return\f2 ;\f0\par
\f2             \}\f0\par
\f2             \f0\par
\f2             \f0 double\f2  \f0 result\f2  = \f0 evaluate\f2 (\f0 expr\f2 );\f0\par
\f2             \f0 display\f2 .\f0 setText\f2 (\f0 String\f2 .\f0 valueOf\f2 (\f0 result\f2 ));\f0\par
\f2         \} \f0 catch\f2  (\f0 Exception\f2  \f0 e\f2 ) \{\f0\par
\f2             \f0 display\f2 .\f0 setText\f2 (\f0 "Error"\f2 );\f0\par
\f2         \}\f0\par
\f2     \}\f0\par
\f2     \f0\par
\f2     // \f0 Custom\f2  \f0 expression\f2  \f0 evaluator\f2  \f0 for\f2  \f0 basic\f2  \f0 arithmetic\par
\f2     \f0 private\f2  \f0 double\f2  \f0 evaluate\f2 (\f0 String\f2  \f0 expression\f2 ) \{\f0\par
\f2         // \f0 Remove\f2  \f0 all\f2  \f0 whitespace\par
\f2         \f0 expression\f2  = \f0 expression\f2 .\f0 replaceAll\f2 (\f0 "\f2\\\\\f0 s\f2 +\f0 "\f2 , \f0 ""\f2 );\f0\par
\f2         \f0\par
\f2         \f0 Stack\f2 <\f0 Double\f2 > \f0 numbers\f2  = \f0 new\f2  \f0 Stack\f2 <>();\f0\par
\f2         \f0 Stack\f2 <\f0 Character\f2 > \f0 operators\f2  = \f0 new\f2  \f0 Stack\f2 <>();\f0\par
\f2         \f0\par
\f2         \f0 for\f2  (\f0 int\f2  \f0 i\f2  = \f0 0\f2 ; \f0 i\f2  < \f0 expression\f2 .\f0 length\f2 (); \f0 i\f2 ++) \{\f0\par
\f2             \f0 char\f2  \f0 c\f2  = \f0 expression\f2 .\f0 charAt\f2 (\f0 i\f2 );\f0\par
\f2             \f0\par
\f2             \f0 if\f2  (\f0 c\f2  == \f0 '\f2  \f0 '\f2 ) \{\f0\par
\f2                 \f0 continue\f2 ;\f0\par
\f2             \}\f0\par
\f2             \f0\par
\f2             \f0 if\f2  (\f0 c\f2  == \f0 '\f2 (\f0 '\f2 ) \{\f0\par
\f2                 \f0 operators\f2 .\f0 push\f2 (\f0 c\f2 );\f0\par
\f2             \} \f0 else\f2  \f0 if\f2  (\f0 c\f2  == \f0 '\f2 )\f0 '\f2 ) \{\f0\par
\f2                 \f0 while\f2  (\f0 operators\f2 .\f0 peek\f2 () != \f0 '\f2 (\f0 '\f2 ) \{\f0\par
\f2                     \f0 numbers\f2 .\f0 push\f2 (\f0 applyOperation\f2 (\f0 operators\f2 .\f0 pop\f2 (), \f0 numbers\f2 .\f0 pop\f2 (), \f0 numbers\f2 .\f0 pop\f2 ()));\f0\par
\f2                 \}\f0\par
\f2                 \f0 operators\f2 .\f0 pop\f2 ();\f0\par
\f2             \} \f0 else\f2  \f0 if\f2  (\f0 isOperator\f2 (\f0 c\f2 )) \{\f0\par
\f2                 \f0 while\f2  (!\f0 operators\f2 .\f0 empty\f2 () && \f0 hasPrecedence\f2 (\f0 c\f2 , \f0 operators\f2 .\f0 peek\f2 ())) \{\f0\par
\f2                     \f0 numbers\f2 .\f0 push\f2 (\f0 applyOperation\f2 (\f0 operators\f2 .\f0 pop\f2 (), \f0 numbers\f2 .\f0 pop\f2 (), \f0 numbers\f2 .\f0 pop\f2 ()));\f0\par
\f2                 \}\f0\par
\f2                 \f0 operators\f2 .\f0 push\f2 (\f0 c\f2 );\f0\par
\f2             \} \f0 else\f2  \{\f0\par
\f2                 \f0 StringBuilder\f2  \f0 sb\f2  = \f0 new\f2  \f0 StringBuilder\f2 ();\f0\par
\f2                 \f0 while\f2  (\f0 i\f2  < \f0 expression\f2 .\f0 length\f2 () && (\f0 Character\f2 .\f0 isDigit\f2 (\f0 expression\f2 .\f0 charAt\f2 (\f0 i\f2 )) || \f0 expression\f2 .\f0 charAt\f2 (\f0 i\f2 ) == \f0 '\f2 .\f0 '\f2 )) \{\f0\par
\f2                     \f0 sb\f2 .\f0 append\f2 (\f0 expression\f2 .\f0 charAt\f2 (\f0 i\f2 ++));\f0\par
\f2                 \}\f0\par
\f2                 \f0 i\f2 --;\f0\par
\f2                 \f0 numbers\f2 .\f0 push\f2 (\f0 Double\f2 .\f0 parseDouble\f2 (\f0 sb\f2 .\f0 toString\f2 ()));\f0\par
\f2             \}\f0\par
\f2         \}\f0\par
\f2         \f0\par
\f2         \f0 while\f2  (!\f0 operators\f2 .\f0 empty\f2 ()) \{\f0\par
\f2             \f0 numbers\f2 .\f0 push\f2 (\f0 applyOperation\f2 (\f0 operators\f2 .\f0 pop\f2 (), \f0 numbers\f2 .\f0 pop\f2 (), \f0 numbers\f2 .\f0 pop\f2 ()));\f0\par
\f2         \}\f0\par
\f2         \f0\par
\f2         \f0 return\f2  \f0 numbers\f2 .\f0 pop\f2 ();\f0\par
\f2     \}\f0\par
\f2     \f0\par
\f2     \f0 private\f2  \f0 boolean\f2  \f0 isOperator\f2 (\f0 char\f2  \f0 c\f2 ) \{\f0\par
\f2         \f0 return\f2  \f0 c\f2  == \f0 '\f2 +\f0 '\f2  || \f0 c\f2  == \f0 '\f2 -\f0 '\f2  || \f0 c\f2  == \f0 '*'\f2  || \f0 c\f2  == \f0 '\f2 /\f0 '\f2 ;\f0\par
\f2     \}\f0\par
\f2     \f0\par
\f2     \f0 private\f2  \f0 boolean\f2  \f0 hasPrecedence\f2 (\f0 char\f2  \f0 op1\f2 , \f0 char\f2  \f0 op2\f2 ) \{\f0\par
\f2         \f0 if\f2  (\f0 op2\f2  == \f0 '\f2 (\f0 '\f2  || \f0 op2\f2  == \f0 '\f2 )\f0 '\f2 ) \{\f0\par
\f2             \f0 return\f2  \f0 false\f2 ;\f0\par
\f2         \}\f0\par
\f2         \f0 if\f2  ((\f0 op1\f2  == \f0 '*'\f2  || \f0 op1\f2  == \f0 '\f2 /\f0 '\f2 ) && (\f0 op2\f2  == \f0 '\f2 +\f0 '\f2  || \f0 op2\f2  == \f0 '\f2 -\f0 '\f2 )) \{\f0\par
\f2             \f0 return\f2  \f0 false\f2 ;\f0\par
\f2         \}\f0\par
\f2         \f0 return\f2  \f0 true\f2 ;\f0\par
\f2     \}\f0\par
\f2     \f0\par
\f2     \f0 private\f2  \f0 double\f2  \f0 applyOperation\f2 (\f0 char\f2  \f0 op\f2 , \f0 double\f2  \f0 b\f2 , \f0 double\f2  \f0 a\f2 ) \{\f0\par
\f2         \f0 switch\f2  (\f0 op\f2 ) \{\f0\par
\f2             \f0 case\f2  \f0 '\f2 +\f0 '\f2 : \f0 return\f2  \f0 a\f2  + \f0 b\f2 ;\f0\par
\f2             \f0 case\f2  \f0 '\f2 -\f0 '\f2 : \f0 return\f2  \f0 a\f2  - \f0 b\f2 ;\f0\par
\f2             \f0 case\f2  \f0 '*'\f2 : \f0 return\f2  \f0 a\f2  \f0 *\f2  \f0 b\f2 ;\f0\par
\f2             \f0 case\f2  \f0 '\f2 /\f0 '\f2 : \f0\par
\f2                 \f0 if\f2  (\f0 b\f2  == \f0 0\f2 ) \f0 throw\f2  \f0 new\f2  \f0 ArithmeticException\f2 (\f0 "Division\f2  \f0 by\f2  \f0 zero"\f2 );\f0\par
\f2                 \f0 return\f2  \f0 a\f2  / \f0 b\f2 ;\f0\par
\f2         \}\f0\par
\f2         \f0 return\f2  \f0 0\f2 ;\f0\par
\f2     \}\f0\par
\f2\}\b0\f0\line\lang9\par
}
 